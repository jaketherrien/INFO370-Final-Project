5*0
is.integer(1)
is.integer(0)
is.integer(1L)
(5 > 1) * (1 > 5)
x <- c(4,7)
x
plot (3:1, 7:9)
?runif
N <- 10
rx <- runif(N)
rx
ry <- runif(y)
ry <- runif(N)
N <- 10000;
rx <- runif(N);
ry <- runif(N);
points(rx,ry,pch=".");
4*sum(rx*rx + ry*ry <= 1)/N
c(A[-5:-2], 3:7)[rep(c(FALSE,TRUE)] + 5
c(A[-5:-2], 3:7)
A <- 1:10
A[-5:-2]
c(A[-5:-2], 3:7)
c(A[-5:-2], 3:7)[rep(c(FALSE,TRUE))] + 5
rep(c,(TRUE,FALSE))
rep(c(TRUE,FALSE))
c(A[-5:-2], 3:7)
x <- c(A[-5:-2], 3:7)
x[c(FALSE,TRUE)]
rx
5 + NaN
5 * NaN
5 + NA
?NA
is.numeric(5)
is.integer(5)
?plot
NaN + NaN
NaN + Ing
NaN + Inf
Inf
NaN*Inf
NA*Inf
5*Inf
5/Inf
f <- function(x) {x + 1}
f(c(5,3))
fun <- function(x,y,z){x+y^2+z^3}
fun(c(3,5),3,1)
fun(c(3,4,5,5), c(1,2), 12)
fun(c(1,2),1,1)
12*3
fun(3,1,12)
3+1^2
3+1^2+12^3
12^3
x <-  (5 > 1) & (1 < 5),
x <-  (5 > 1) & (1 < 5)
is.numeric(x)
x <- (5 > 1) * (1 < 5)
is.numeric(x)
plot(1,2)
plot(1:2,1:2)
Mat <- matrix(1:8,ncol=4,byrow=FALSE)
Mat[,1]
Mat[1,]
Mat[2,2]
Mat[row1]
Mat
simx <- runif(100000,0,1)
mean(simx)
simx <- runif(100000,0,10)
mean(simx)
mean(simx^2)
mean(simx > 7)
row 1 <- c(0,1)
row1 <0 c(0,1)
row1 <- c(0,1)
row2 <- c(1,1)
rbind(row1,row2)
mat1 <- rbind(row1,row2)
row3 <- c(2,2)
row4 <- c(2,2)
mat2 <- rbind(row3,row4)
mat1 * mat2
simx <- runif(100000,0,1)
simy <- runif(100000,0,1)
mean(simx > simy)
mean(simx^2>simy)
pi
1-(pi/4)
name
name <- "Mike"
name
hometown <- "Knoxville"
my.name <- "Jake Therrien"
my.height <- 70
puppies <- 1
puppy.price <- 1000
total.cost <- puppies * puppy.price
too.expensive <- total.cost > 1000
max.puppies <- 1000/puppy.price
install.packages("stringr")
library(stringr)
addThree <- function(input) {
return (input+3)
}
ten <- addThree(7)
FeetToMeters <- function(feet) {
return (feet*0.3048)
}
height.in.feet <- FeetToMeters(my.height)
?/
height.in.feet <- FeetToMeters(my.height/12)
height.in.feet <- my.height/12
height.in.feet <- FeetToMeters(height.in.feet)
height.in.feet <- my.height/12
height.in.meters <- FeetToMeters(height.in.feet)
first.ten <- 10:20
?seq
next.ten <- seq(21,30)
all.numbers <- c(first.ten, next.ten)
all.numbers
eleventh <- all.numbers[11]
eleventh
?diff
CompareLength <- function(v1, v2) {
diff <- diff(length(v1), length(v2))
return ("The difference in lengths is " + diff)
}
CompareLength(c(1,4),c(1,5))
return (diff)
CompareLength <- function(v1, v2) {
diff <- diff(length(v1), length(v2))
return (diff)
}
CompareLength(c(1,4),c(1,5))
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
CompareLength <- function(v1, v2) {
difference <- diff(length(v1), length(v2))
return (diff)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
CompareLength <- function(v1, v2) {
difference <- diff(length(v1), length(v2))
return (difference)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
dif <- length(v1) - length(v2)
return (difference)
CompareLength <- function(v1, v2) {
dif <- length(v1) - length(v2)
return (difference)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
return (dif)
CompareLength <- function(v1, v2) {
dif <- length(v1) - length(v2)
return (dif)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
dif <- abs(length(v1) - length(v2))
CompareLength <- function(v1, v2) {
dif <- abs(length(v1) - length(v2))
return (dif)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
dif <- abs(length(v1) - length(v2))
return ("The difference in lengths is " + dif)
CompareLength <- function(v1, v2) {
dif <- abs(length(v1) - length(v2))
return ("The difference in lengths is " + dif)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
CompareLength <- function(v1, v2) {
dif <- abs(length(v1) - length(v2))
return ("The difference in lengths is ", dif)
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
?cat
?paste
CompareLength <- function(v1, v2) {
dif <- abs(length(v1) - length(v2))
return (paste("The difference in lengths is ",dif))
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
dif <- abs(length(v1) - length(v2))
return (paste("The difference in lengths is ", dif))
CompareLength <- function(v1, v2) {
dif <- abs(length(v1) - length(v2))
return (paste("The difference in lengths is ", dif))
}
v1 <- 1:4
v2 <- 1:10
CompareLength(v1,v2)
DescribeDifference <- function(v1,v2) {
dif <- abs(length(v1) - length(v2))
if (length(v1) > length(v2)) {
return (paste("Your first vector is longer by ",dif," elements"))
} else {
return (paste("Your second vector is longer by ",dif," elements"))
}
}
DescribeDifference(v1,v2)
DescribeDifference2(v1,v2)
dif <- abs(length(v1) - length(v2))
if (length(v1) > length(v2)) {
return ("v1")
} else {
return ("v2")
}
DescribeDifference2 <- function(v1,v2) {
dif <- abs(length(v1) - length(v2))
if (length(v1) > length(v2)) {
return ("v1")
} else {
return ("v2")
}
}
DescribeDifference2(v1,v2)
DescribeDifference2 <- function(v1,v2) {
dif <- abs(length(v1) - length(v2))
if (length(v1) > length(v2)) {
return (deparse(substitute((v1))))
} else {
return (deparse(substitute((v2))))
}
}
DescribeDifference2(v1,v2)
yahtzee <- 1:100
DescribeDifference2(v1,yahtzee)
DescribeDifference(v1,v2)
knitr::opts_chunk$set(echo = TRUE)
titanic <- data(Titanic)
library(jsonlite)
library(httr)
base.url <- "https://congress.api.sunlightfoundation.com"
library(jsonlite)
library(httr)
base.url <- "https://congress.api.sunlightfoundation.com"
library(jsonlite)
library(httr)
base.url <- "https://congress.api.sunlightfoundation.com/districts/locate?"
query.params <- list(zip = '98105')
response <- GET(base.url, query = query.params)
body <- fromJSON(content(comm.response,"text"))$results$members[[1]] %>% flatten()
library(dplyr)
response <- GET(base.url, query = query.params)
body <- fromJSON(content(comm.response,"text"))$results$members[[1]] %>% flatten()
body <- fromJSON(content(response,"text"))$results$members[[1]] %>% flatten()
data <- fromJSON(content(response,"text"))
data.df <- as.data.frame(data)
View(data.df)
library(jsonlite)
library(dplyr)
base.url <- "https://congress.api.sunlightfoundation.com/districts/locate?"
query.params <- list(zip = '98105')
response <- GET(base.url, query = query.params)
data <- fromJSON(content(response,"text"))
data.df <- as.data.frame(data)
View(data.df)
base.url <- "https://congress.api.sunlightfoundation.com/districts/locate?"
zip.code <- '98105'
query.params <- list(zip = zip.code)
response <- GET(base.url, query = query.params)
data.df <- as.data.frame(data)
View(data.df)
library(plotly)
plot_ly(data = mtcars, x = mpg, y = wt)
plot_ly(data = mtcars, x = mtcars$mpg, y = mtcars$wt)
library(dplyr)
data <- read.csv("data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv", stringsAsFactors = FALSE)
data <- data %>% filter(location_name != "Washington")
data <- data %>% filter(sex != "Both")
King.County <-  data %>% filter(location_name == "King County")'
setwd("~/Documents/JUNIOR_YEAR/INFO_201/m15-plotly/exercise-3")
library(dplyr)
data <- read.csv("data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv", stringsAsFactors = FALSE)
data <- data %>% filter(location_name != "Washington")
data <- data %>% filter(sex != "Both")
King.County <-  data %>% filter(location_name == "King County")'
library(ggplot2)
?diamonds
View(diamonds)
sample_n(diamonds, 1000)
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(diamonds.sample)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data = diamonds.sample)
library("ggplot2")
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, shape = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size=price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size=price, color = price))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color = carat), geometry = smooth)
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, fill=clarity))
ggplot(data = diamonds.sample) +
geom_histogram(aes(x=price, fill=clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.1) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=FALSE)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.5) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=FALSE)
setwd("~/Documents/SENIOR/INFO370/INFO370-Final-Project")
funding_1995 = read.csv(file="data/1995.csv", header=TRUE, sep=",")
funding_1996 = read.csv(file="data/1996.csv", header=TRUE, sep=",")
funding_1995 = read.csv(file="Data/Funding/1995.csv", header=TRUE, sep=",")
funding_1996 = read.csv(file="Data/Funding/1996.csv", header=TRUE, sep=",")
funding_1997 = read.csv(file="Data/Funding/1997.csv", header=TRUE, sep=",")
funding_1998 = read.csv(file="Data/Funding/1998.csv", header=TRUE, sep=",")
funding_1999 = read.csv(file="Data/Funding/1999.csv", header=TRUE, sep=",")
funding_2000 = read.csv(file="Data/Funding/2000.csv", header=TRUE, sep=",")
funding_2001 = read.csv(file="Data/Funding/2001.csv", header=TRUE, sep=",")
funding_2002 = read.csv(file="Data/Funding/2002.csv", header=TRUE, sep=",")
funding_2003 = read.csv(file="Data/Funding/2003.csv", header=TRUE, sep=",")
funding_2004 = read.csv(file="Data/Funding/2004.csv", header=TRUE, sep=",")
funding_2005 = read.csv(file="Data/Funding/2005.csv", header=TRUE, sep=",")
funding_2006 = read.csv(file="Data/Funding/2006.csv", header=TRUE, sep=",")
funding_2007 = read.csv(file="Data/Funding/2007.csv", header=TRUE, sep=",")
funding_2008 = read.csv(file="Data/Funding/2008.csv", header=TRUE, sep=",")
funding_2009 = read.csv(file="Data/Funding/2009.csv", header=TRUE, sep=",")
funding_2010 = read.csv(file="Data/Funding/2010.csv", header=TRUE, sep=",")
funding_2011 = read.csv(file="Data/Funding/2011.csv", header=TRUE, sep=",")
funding_2012 = read.csv(file="Data/Funding/2012.csv", header=TRUE, sep=",")
funding_2014 = read.csv(file="Data/Funding/2014.csv", header=TRUE, sep=",")
View(funding_1995)
View(funding_1995)
View(funding_1998)
View(funding_1996)
View(funding_1996)
View(funding_1997)
View(funding_1997)
View(funding_1998)
View(funding_1998)
funding_1995 = read.csv(file="Data/Funding/1995.csv", header=TRUE, sep=",")
funding_1996 = read.csv(file="Data/Funding/1996.csv", header=TRUE, sep=",")
funding_1997 = read.csv(file="Data/Funding/1997.csv", header=TRUE, sep=",")
funding_1998 = read.csv(file="Data/Funding/1998.csv", header=TRUE, sep=",")
funding_1999 = read.csv(file="Data/Funding/1999.csv", header=TRUE, sep=",")
funding_2000 = read.csv(file="Data/Funding/2000.csv", header=TRUE, sep=",")
funding_2001 = read.csv(file="Data/Funding/2001.csv", header=TRUE, sep=",")
funding_2002 = read.csv(file="Data/Funding/2002.csv", header=TRUE, sep=",")
funding_2003 = read.csv(file="Data/Funding/2003.csv", header=TRUE, sep=",")
funding_2004 = read.csv(file="Data/Funding/2004.csv", header=TRUE, sep=",")
funding_2005 = read.csv(file="Data/Funding/2005.csv", header=TRUE, sep=",")
funding_2006 = read.csv(file="Data/Funding/2006.csv", header=TRUE, sep=",")
funding_2007 = read.csv(file="Data/Funding/2007.csv", header=TRUE, sep=",")
funding_2008 = read.csv(file="Data/Funding/2008.csv", header=TRUE, sep=",")
funding_2009 = read.csv(file="Data/Funding/2009.csv", header=TRUE, sep=",")
funding_2010 = read.csv(file="Data/Funding/2010.csv", header=TRUE, sep=",")
funding_2011 = read.csv(file="Data/Funding/2011.csv", header=TRUE, sep=",")
funding_2012 = read.csv(file="Data/Funding/2012.csv", header=TRUE, sep=",")
funding_2014 = read.csv(file="Data/Funding/2014.csv", header=TRUE, sep=",")
test.score = read.csv(file="Data/score_data.csv", header=TRUE, sep=",")
setwd("C:/Users/maryh/Desktop/370/INFO370-Final-Project")
test.score = read.csv(file="Data/score_data.csv", header=TRUE, sep=",")
test.score = read.csv(file="Data/scores_data.csv", header=TRUE, sep=",")
score.by.year <- as.data.frame(t(test.score))
View(score.by.year)
View(score.by.year)
#all funding data together
funding.data
#writing to .csv
write.csv(funding.data, file = "Data/funding_data_all_years.csv")
#wrangle the test score data
library(tidyr)
score.data = read.csv(file="Data/scores_data.csv", header=TRUE, sep=",", check.names=F)
gathered.data = gather(score.data, "year", "score", 2:7)
write.csv(gathered.data, file = "Data/score_data_formatted.csv")
divide.by.total.score <-
View(gathered.data)
divide.by.total.score <- gathered.data[0:104,]
View(divide.by.total.score)
View(divide.by.total.score)
divide.by.total.score <- divide.by.total.score$score / 1600
divide.by.total.score.1600 <- divide.by.total.score$score / 1600
divide.by.total.score <- gathered.data[0:104,]
divide.by.total.score.first <- divide.by.total.score$score / 1600
divid.by.tota <- gathered.data[105, 312]
divide.by.total <- gathered.data[105, 312]
View(divide.by.total.score)
View(divide.by.total.score)
divide.by.total.score
divide.by.total.score.first
divide.by.total <- gathered.data[105:312,]
View(divide.by.total)
View(divide.by.total)
divide.by.total.second <- divide.by.total$score / 2400
View(divide.by.total)
View(divide.by.total.score)
norm.score <- bind_rows(divide.by.total.score.first, divide.by.total.second)
library(dplyr)
library(tidyr)
setwd("C:/Users/maryh/Desktop/370/INFO370-Final-Project")
library(dplyr)
library(tidyr)
norm.score <- bind_rows(divide.by.total.score.first, divide.by.total.second)
norm.score <- rbind(divide.by.total.score.first, divide.by.total.second)
View(norm.score)
View(norm.score)
divide.by.total
#pull in data
funding_1995 = read.csv(file="Data/Funding/1995.csv", header=TRUE, sep=",")
funding_1996 = read.csv(file="Data/Funding/1996.csv", header=TRUE, sep=",")
funding_1997 = read.csv(file="Data/Funding/1997.csv", header=TRUE, sep=",")
funding_1998 = read.csv(file="Data/Funding/1998.csv", header=TRUE, sep=",")
funding_1999 = read.csv(file="Data/Funding/1999.csv", header=TRUE, sep=",")
funding_2000 = read.csv(file="Data/Funding/2000.csv", header=TRUE, sep=",")
funding_2001 = read.csv(file="Data/Funding/2001.csv", header=TRUE, sep=",")
funding_2002 = read.csv(file="Data/Funding/2002.csv", header=TRUE, sep=",")
funding_2003 = read.csv(file="Data/Funding/2003.csv", header=TRUE, sep=",")
funding_2004 = read.csv(file="Data/Funding/2004.csv", header=TRUE, sep=",")
funding_2005 = read.csv(file="Data/Funding/2005.csv", header=TRUE, sep=",")
funding_2006 = read.csv(file="Data/Funding/2006.csv", header=TRUE, sep=",")
funding_2007 = read.csv(file="Data/Funding/2007.csv", header=TRUE, sep=",")
funding_2008 = read.csv(file="Data/Funding/2008.csv", header=TRUE, sep=",")
funding_2009 = read.csv(file="Data/Funding/2009.csv", header=TRUE, sep=",")
funding_2010 = read.csv(file="Data/Funding/2010.csv", header=TRUE, sep=",")
funding_2011 = read.csv(file="Data/Funding/2011.csv", header=TRUE, sep=",")
funding_2012 = read.csv(file="Data/Funding/2012.csv", header=TRUE, sep=",")
funding_2014 = read.csv(file="Data/Funding/2014.csv", header=TRUE, sep=",")
#adding year column
funding_1995$year <- 1995
funding_1996$year <- 1996
funding_1997$year <- 1997
funding_1998$year <- 1998
funding_1999$year <- 1999
funding_2000$year <- 2000
funding_2001$year <- 2001
funding_2002$year <- 2002
funding_2003$year <- 2003
funding_2004$year <- 2004
funding_2005$year <- 2005
funding_2006$year <- 2006
funding_2007$year <- 2007
funding_2008$year <- 2008
funding_2009$year <- 2009
funding_2010$year <- 2010
funding_2011$year <- 2011
funding_2012$year <- 2012
funding_2014$year <- 2014
#combining all years into one dataframe
funding.data <- do.call("rbind", list(funding_1995, funding_1996, funding_1997, funding_1998,
funding_1999, funding_2000, funding_2001, funding_2002,
funding_2003, funding_2004, funding_2005, funding_2006,
funding_2007, funding_2008, funding_2009, funding_2010,
funding_2011, funding_2012, funding_2014))
#all funding data together
funding.data
#writing to .csv
write.csv(funding.data, file = "Data/funding_data_all_years.csv")
#wrangle the test score data
library(tidyr)
score.data = read.csv(file="Data/scores_data.csv", header=TRUE, sep=",", check.names=F)
gathered.data = gather(score.data, "year", "score", 2:7)
write.csv(gathered.data, file = "Data/score_data_formatted.csv")
#normalize the scores
gathered.data$score    <- ifelse(gathered.data$year == '1995' | gathered.data$year == '2000', gathered.data$score/1600, gathered.data$score)
gathered.data$score    <- ifelse(gathered.data$year == '2005' | gathered.data$year == '2010' | gathered.data$year == '2013' | gathered.data$year == '2014', gathered.data$score/2400, gathered.data$score)
View(gathered.data)
View(gathered.data)
View(funding.data)
View(funding.data)
